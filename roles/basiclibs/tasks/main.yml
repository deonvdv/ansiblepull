- name: Install libs for Ubuntu
  apt: name={{ item }} state=present
  with_items:
   - dh-php5
   - php-pear
   - php5-apcu
   - php5-cli
   - php5-common
   - php5-curl
   - php5-dev
   - php5-fpm
   - php5-gd
   - php5-gmp
   - php5-imap
   - php5-json
   - php5-mcrypt
   - php5-memcached
   - php5-mysqlnd
   - php5-pgsql
   - php5-readline
   - php5-sqlite
   - php5-xdebug
   - pkg-php-tools
   - ntp
   - openssh-server
   - telnet
   - git
   - iptables-persistent
   - curl
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

- name: install composer
  get_url: https://getcomposer.org/installer dest: /tmp/composer-installer.php mode: 0755
  #command: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin creates=/usr/local/bin/composer
  
- name: install composer
  commmand: php /tmp/composer-installer.php chdir=/tmp

- name: rename composer.phar to composer
  command: mv /tmp/composer.phar /usr/local/bin/composer creates=/usr/local/bin/composer

- name: make composer executable
  file: path=/usr/local/bin/composer mode=a+x state=file

- name: for nginx latest version
  apt_key: url=http://nginx.org/keys/nginx_signing.key
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

- name: add nginx source list
  apt_repository: repo='deb http://nginx.org/packages/ubuntu/ trusty nginx' state=present

- name: add nginx source list
  apt_repository: repo='deb-src http://nginx.org/packages/ubuntu/ trusty nginx' state=present

- name: add group
  group: name=nginx state=present 
  remote_user: root

- name: nginx user
  user: name=nginx shell=/bin/bash group=nginx createhome=yes home=/home/nginx update_password=always password=656000$n/dXEokOWllsJCPt$qUQxFgKF84SlNf0ZuAh.dherNuqbgTFBW4GusDCo/AHc4FMeRaOUMhxrlZYLiswG/SPOiYefgJI.on3mhDo0I0 state=present
  remote_user: root

- name: install latest nginx
  apt: name=nginx state=latest

#- name: stop nginx
#  service: name=nginx state=stopped

#- name: nginx user
#  user: name=nginx shell=/bin/bash groups=nginx createhome=yes home=/home/nginx update_password=always password=04d6785ba65

#- name: start nginx
#  service: name=nginx state=started

- name: instance ID
  shell: wget -qO- http://instance-data/latest/meta-data/instance-id
  register: instance_id

- name: print
  debug: var=instance_id.stdout

- name: region
  shell: wget -qO- http://instance-data/latest/meta-data/placement/availability-zone | sed 's/.$//' 
  register: region

- name: print
  debug: var=region.stdout

- name: get autoscale group
  shell: aws ec2 describe-tags --region {{ region.stdout }} --filter "Name=resource-id,Values={{ instance_id.stdout }}" --output=text |grep autoscaling |awk '{ print $5}'
  register: autoscale_group

- name: print
  debug: var=autoscale_group.stdout

- name: set_fact
  set_fact: autoscale_group={{autoscale_group.stdout}}

- name: copy config_files_for_api
  copy: src={{ item.path }} dest={{ item.dest }} 
  with_items:
    - { path: 'api_file', dest: '/usr/local/src/api_file' }
  when: autoscale_group == "dpapi-userdataG"

- name: ensure directory
  file: path=/var/www/api.datedata.com  owner=nginx group=nginx state=directory mode=0755 recurse=yes
  when: autoscale_group == "dpapi-userdataG"


#- name: copy config_files_for_api
#  template: src=api_file dest=/usr/local/src/api_file
  #when: "{{ autoscale_group.stdout }}" == 'dpapi-userdataG'
